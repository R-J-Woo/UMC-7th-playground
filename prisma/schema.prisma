// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birthday      String   @map("birthday")
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  phoneNumber   String   @map("phone_number") @db.VarChar(15)

  userFavorCategories UserFavorCategory[]
  reviews Review[]
  userMissions   userMission[]

  @@map("user")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_prefer")
}

model Region {
  id             Int          @id @default(autoincrement())
  name           String       @db.VarChar(20)

  stores     Store[]
}

model Store {
  id             Int          @id @default(autoincrement())
  regionId       Int          @map("region_id")
  name           String       @db.VarChar(50)
  address        String       @db.VarChar(50)
  score          Float
  
  region     Region    @relation(fields: [regionId], references: [id])
  reviews    Review[]
  missions   Mission[]
}

model Review {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  storeId        Int          @map("store_id")
  body           String       @db.Text
  score          Float
  store          Store        @relation(fields: [storeId], references: [id])
}

model Mission {
  id             Int          @id @default(autoincrement())
  storeId        Int          @map("store_id")
  reward         Int
  deadline       String       @db.VarChar(10)
  missionSpec    String       @db.Text

  store          Store        @relation(fields: [storeId], references: [id])
  userMissions   userMission[]
}

model userMission {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  missionId      Int          @map("mission_id")
  status         String       @db.VarChar(15)

  mission        Mission      @relation(fields: [missionId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  @@map("user_mission")
}